" Environment
behave xterm
syntax enable
set nocompatible
set title

set directory^=$HOME/.vim/swap//

" encoding
set encoding=utf-8
try
  lang en_US
catch
endtry

set antialias
set lazyredraw

set ruler
set number

set cmdheight=3
set showmode
set showcmd
set more

set showmatch
set ttyfast

" Formatting
set fileformats=unix,dos,mac
set fileformat=unix

" Theme
syntax enable
" set relativenumber
set background=light

if has("gui_running")
  autocmd GUIEnter * set vb t_vb=
  set scrolloff=3
  set sidescrolloff=1
  set guioptions=acemg
  set guifont=source_code_pro:h13
  " set guifont=Menlo\ Regular:h12
  set guifontwide=source_code_pro:h13
  set guicursor=n:blinkon0,v:blinkon0
  set noballooneval
  set cursorline
  set textwidth=120
  set colorcolumn=+1,+2,+3
  set linespace=1
  set fuoptions=maxvert
  set mouse=a
  set mousehide
  set mousemodel=popup
  set nobackup
  set nowritebackup
end

" solarized options
if !has("gui_running")
"   let g:solarized_termtrans=1
"   let g:solarized_termcolors=256
endif

" http://vimcolors.com/
" colorscheme jellybeans solarized distinguished wombat basic-dark iceberg
" monokain skyhawk twilight falcon turtles molokai metalheart
" colorscheme metalheart
colorscheme onedark
let g:airline_theme='jellybeans'

" Indent
set ai
set si
set et

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
" TEST

set backspace=indent,eol,start	" more powerful backspacing

set cpoptions=aABceFsmq
"set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set statusline=%t%(\ [%n%M]%)%(\ %H%R%W%)\ %(%c-%v,\ %l\ of\ %L%)

" Now we set some defaults for the editor
set autoindent		" always set autoindenting on
set textwidth=0		" Don't wrap words by default
set nobackup		" Don't keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more than
			" 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" a better way to see comments
hi Comment  term=bold ctermfg=5 guifg=#80a0ff

" allow auto completion for colons in class names in Perl
set iskeyword+=:

" NERDTreeType mapping
autocmd VimEnter * if !argc() | NERDTree | endif
let NERDTreeHijackNetrw = 1
let NERDTreeQuitOnOpen  = 0
let NERDTreeMinimalUI   = 1
let g:NERDTreeWinSize   = 40

nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
nnoremap <leader>b :Bookmark<space>
nnoremap <leader>n :let NERDTreeQuitOnOpen = 0<bar>NERDTreeToggle<cr>
nnoremap <leader>N :let NERDTreeQuitOnOpen = 1<bar>NERDTreeToggle<cr>
nnoremap <leader>f :NERDTreeFind<cr>
nnoremap - :NERDTreeFind<cr>

" long line wrapping
nnoremap j gj
nnoremap k gk

" nmap <silent> <F3> :NERDTreeToggle<CR>
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" The following are commented out as they cause vim to behave a lot
" different from regular vi. They are highly recommended though.
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set incsearch           " Incremental search
set autowrite           " Automatically save before commands like :next and :make
set hlsearch

" make ending xml tag
map <F2> 0v/\s*[<a-zA-Z0-9:\-_]*<return>hyo<esc>pa><esc>^a/<esc>

" less style searches
map \ /<return>

" some autokeys
map <F3> :set noignorecase<return>
map <F4> :set ignorecase<return>

if has("statusline")
  set laststatus=2

  set statusline=%.50f\ " space
	set statusline+=%{StatusLongLineWarning()}

  "display warnings for wrong fileformats, file encodings, and trailing whitespace
  set statusline+=%#warningmsg#
  set statusline+=%{&fileformat!='unix'?'['.&fileformat.']':''}
  set statusline+=%{&fileencoding!='utf-8'?'['.&fileencoding.']':''}
  set statusline+=%{&bomb==1?'[BOM]':''}
  set statusline+=%*
  "
  "display a warning if &et is wrong, or we have mixed-indenting
  set statusline+=%#error#
  set statusline+=%{&paste?'[paste]':''}
  set statusline+=%*

  set statusline+=%r " read-only flag
  set statusline+=%m " modified flag
  set statusline+=%w
  set statusline+=%{fugitive#statusline()}

  set statusline+=%= "left/right separator
  set statusline+=%y
  set statusline+=%{&fileformat=='unix'?'['.&fileformat.']':''}
  set statusline+=%{&fileencoding=='utf-8'?'['.&fileencoding.']':''}
  set statusline+=[U+%04B]
  set statusline+=[%4l/%L,%3v][%P]
endif

" dupe tag and make an ending tag
" map <F5> GVgg:!mkvixml<return>

" Cut out empty end lines
"nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
autocmd FileType c,cpp,java,php,python,ruby,perl autocmd BufWritePre <buffer> :%s/\s\+$//e

" run mikes mkxml command externally to clean up
map <F9> :!mkvixml<return>

" set tabbing and backspacing of multiline selects
map <tab> > gv
map <backspace> < gv

" tabspacing 2
set ts=2
set sts=2
set smartindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab

" buffer mapping
nnoremap gb :ls<CR>:b<Space>

" vundle
nnoremap <leader>vc :PluginClean<cr>
nnoremap <leader>vl :PluginList<cr>
nnoremap <leader>vi :PluginInstall<cr>
nnoremap <leader>vu :PluginInstall!<cr>
nnoremap <leader>vs :PluginSearch<space>

" Ruby
nnoremap <leader>tr :botright :vsplit config/routes.rb<cr>
nnoremap <leader>tg :botright :vsplit Gemfile<cr>
nnoremap <silent> <leader>w :echo system("ruby -wc " . bufname("%"))<CR>

" Perl
autocmd FileType perl set tabstop=4|set shiftwidth=4|set expandtab|set softtabstop=4
map ,pt <ESC>:'<,'>!perltidy -boc --paren-tightness=2 --entab-leading-whitespace=4 -mft=1<CR>
autocmd FileType perl set showmatch
let perl_extended_vars = 1
let perl_include_pod = 1
" let perl_fold=1
" let perl_fold_blocks=1

" Fugitive
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gs :Gstatus<cr>

" Tabularize

vnoremap <leader>a<bar> :Tab /<bar><cr>
nnoremap <leader>a<bar> :Tab /<bar><cr>

vnoremap <leader>a<space> :Tab /[^ ]<space>\+\zs/l0l1<cr>
nnoremap <leader>a<space> :Tab /[^ ]<space>\+\zs/l0l1<cr>

" foo: 1
" foobar: 2
nnoremap <leader>a: :Tab /\w:\zs/l0l1<cr>
vnoremap <leader>a: :Tab /\w:\zs/l0l1<cr>

"    foo: 1
" foobar: 2
nnoremap <leader>ar: :Tab /\w:\zs/r0l1<cr>
vnoremap <leader>ar: :Tab /\w:\zs/r0l1<cr>

nnoremap <leader>a, :Tab /,\zs<cr>
vnoremap <leader>a, :Tab /,\zs<cr>

nnoremap <leader>a= :Tab /=<cr>
vnoremap <leader>a= :Tab /=<cr>

" :foo    => 1
" :foobar => 2
nnoremap <leader>a> :Tab /=><cr>
vnoremap <leader>a> :Tab /=><cr>

vnoremap <leader>am2 :Tab /<bar>/l1c1l1c1r1c1<cr>
nnoremap <leader>am2 :Tab /<bar>/l1c1l1c1r1c1<cr>

vnoremap <leader>am3 :Tab /<bar>/l1c1l1c1l1c1r1c1<cr>
nnoremap <leader>am3 :Tab /<bar>/l1c1l1c1l1c1r1c1<cr>

set listchars=tab:»·,trail:·,eol:¬,extends:#,nbsp:%,precedes:<

" Highlight a column in csv text.
" :Csv 1    " highlight first column
" :Csv 12   " highlight twelfth column
" :Csv 0    " switch off highlight
function! CSVH(colnr)
  if a:colnr > 1
    let n = a:colnr - 1
    execute 'match Keyword /^\([^,]*,\)\{'.n.'}\zs[^,]*/'
    execute 'normal! 0'.n.'f,'
  elseif a:colnr == 1
    match Keyword /^[^,]*/
    normal! 0
  else
    match
  endif
endfunction

function! StatusTabWarning()
  if !exists("b:status_tab_warning")
    let tabs   = search('^\t', 'nw') != 0
    let spaces = search('^ ', 'nw')  != 0

    if tabs && spaces
      let b:status_tab_warning = '[mixed-indenting]'
    elseif (spaces && !&et) || (tabs && &et)
      let b:status_tab_warning = '[expandtab]'
    else
      let b:status_tab_warning = ''
    endif
  endif

  return b:status_tab_warning
endfunction

" return a list containing the lengths of the long lines in this buffer
function! s:LongLines()
  let threshold = (&textwidth ? &textwidth : 120)
  let spaces = repeat(" ", &ts)

  let long_line_lengths = []

  let i = 1
  while i <= line("$")
    let len = strlen(substitute(getline(i), '\t', spaces, 'g'))

    if len > threshold
      call add(long_line_lengths, len)
    endif

    let i += 1
  endwhile

  return long_line_lengths
endfunction

" find the median of the given array of numbers
function! s:Median(nums)
  let nums = sort(a:nums)
  let l = len(nums)

  if l % 2 == 1
    let i = (l - 1) / 2
    return nums[i]
  else
    return (nums[1/2] + nums[(1/2)-1]) / 2
  endif
endfunction

function! StatusLongLineWarning()
  if !exists("b:status_long_line_warning")
    let long_line_lengths = s:LongLines()

    if len(long_line_lengths) > 0
      let b:status_long_line_warning = "[" .
            \ '#' . len(long_line_lengths) . "," .
            \ 'm' . s:Median(long_line_lengths) . "," .
            \ '$' . max(long_line_lengths) . "]"
    else
      let b:status_long_line_warning = ""
    endif
  endif

  return b:status_long_line_warning
endfunction

command! -nargs=1 Csv :call CSVH(<args>)
